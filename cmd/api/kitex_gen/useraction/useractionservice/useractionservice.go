// Code generated by Kitex v0.3.2. DO NOT EDIT.

package useractionservice

import (
	"context"
	"dy/cmd/user_action/kitex_gen/useraction"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userActionServiceServiceInfo
}

var userActionServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserActionService"
	handlerType := (*useraction.UserActionService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetUser":              kitex.NewMethodInfo(getUserHandler, newUserActionServiceGetUserArgs, newUserActionServiceGetUserResult, false),
		"PublishList":          kitex.NewMethodInfo(publishListHandler, newUserActionServicePublishListArgs, newUserActionServicePublishListResult, false),
		"FavoriteAction":       kitex.NewMethodInfo(favoriteActionHandler, newUserActionServiceFavoriteActionArgs, newUserActionServiceFavoriteActionResult, false),
		"FavoriteList":         kitex.NewMethodInfo(favoriteListHandler, newUserActionServiceFavoriteListArgs, newUserActionServiceFavoriteListResult, false),
		"CommentAction":        kitex.NewMethodInfo(commentActionHandler, newUserActionServiceCommentActionArgs, newUserActionServiceCommentActionResult, false),
		"CommentList":          kitex.NewMethodInfo(commentListHandler, newUserActionServiceCommentListArgs, newUserActionServiceCommentListResult, false),
		"RelationAction":       kitex.NewMethodInfo(relationActionHandler, newUserActionServiceRelationActionArgs, newUserActionServiceRelationActionResult, false),
		"RelationFollowList":   kitex.NewMethodInfo(relationFollowListHandler, newUserActionServiceRelationFollowListArgs, newUserActionServiceRelationFollowListResult, false),
		"RelationFollowerList": kitex.NewMethodInfo(relationFollowerListHandler, newUserActionServiceRelationFollowerListArgs, newUserActionServiceRelationFollowerListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "useraction",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func getUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useraction.UserActionServiceGetUserArgs)
	realResult := result.(*useraction.UserActionServiceGetUserResult)
	success, err := handler.(useraction.UserActionService).GetUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserActionServiceGetUserArgs() interface{} {
	return useraction.NewUserActionServiceGetUserArgs()
}

func newUserActionServiceGetUserResult() interface{} {
	return useraction.NewUserActionServiceGetUserResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useraction.UserActionServicePublishListArgs)
	realResult := result.(*useraction.UserActionServicePublishListResult)
	success, err := handler.(useraction.UserActionService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserActionServicePublishListArgs() interface{} {
	return useraction.NewUserActionServicePublishListArgs()
}

func newUserActionServicePublishListResult() interface{} {
	return useraction.NewUserActionServicePublishListResult()
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useraction.UserActionServiceFavoriteActionArgs)
	realResult := result.(*useraction.UserActionServiceFavoriteActionResult)
	success, err := handler.(useraction.UserActionService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserActionServiceFavoriteActionArgs() interface{} {
	return useraction.NewUserActionServiceFavoriteActionArgs()
}

func newUserActionServiceFavoriteActionResult() interface{} {
	return useraction.NewUserActionServiceFavoriteActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useraction.UserActionServiceFavoriteListArgs)
	realResult := result.(*useraction.UserActionServiceFavoriteListResult)
	success, err := handler.(useraction.UserActionService).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserActionServiceFavoriteListArgs() interface{} {
	return useraction.NewUserActionServiceFavoriteListArgs()
}

func newUserActionServiceFavoriteListResult() interface{} {
	return useraction.NewUserActionServiceFavoriteListResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useraction.UserActionServiceCommentActionArgs)
	realResult := result.(*useraction.UserActionServiceCommentActionResult)
	success, err := handler.(useraction.UserActionService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserActionServiceCommentActionArgs() interface{} {
	return useraction.NewUserActionServiceCommentActionArgs()
}

func newUserActionServiceCommentActionResult() interface{} {
	return useraction.NewUserActionServiceCommentActionResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useraction.UserActionServiceCommentListArgs)
	realResult := result.(*useraction.UserActionServiceCommentListResult)
	success, err := handler.(useraction.UserActionService).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserActionServiceCommentListArgs() interface{} {
	return useraction.NewUserActionServiceCommentListArgs()
}

func newUserActionServiceCommentListResult() interface{} {
	return useraction.NewUserActionServiceCommentListResult()
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useraction.UserActionServiceRelationActionArgs)
	realResult := result.(*useraction.UserActionServiceRelationActionResult)
	success, err := handler.(useraction.UserActionService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserActionServiceRelationActionArgs() interface{} {
	return useraction.NewUserActionServiceRelationActionArgs()
}

func newUserActionServiceRelationActionResult() interface{} {
	return useraction.NewUserActionServiceRelationActionResult()
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useraction.UserActionServiceRelationFollowListArgs)
	realResult := result.(*useraction.UserActionServiceRelationFollowListResult)
	success, err := handler.(useraction.UserActionService).RelationFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserActionServiceRelationFollowListArgs() interface{} {
	return useraction.NewUserActionServiceRelationFollowListArgs()
}

func newUserActionServiceRelationFollowListResult() interface{} {
	return useraction.NewUserActionServiceRelationFollowListResult()
}

func relationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useraction.UserActionServiceRelationFollowerListArgs)
	realResult := result.(*useraction.UserActionServiceRelationFollowerListResult)
	success, err := handler.(useraction.UserActionService).RelationFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserActionServiceRelationFollowerListArgs() interface{} {
	return useraction.NewUserActionServiceRelationFollowerListArgs()
}

func newUserActionServiceRelationFollowerListResult() interface{} {
	return useraction.NewUserActionServiceRelationFollowerListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUser(ctx context.Context, req *useraction.GetUserRequest) (r *useraction.GetUserResponse, err error) {
	var _args useraction.UserActionServiceGetUserArgs
	_args.Req = req
	var _result useraction.UserActionServiceGetUserResult
	if err = p.c.Call(ctx, "GetUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *useraction.PublishListRequest) (r *useraction.PublishListResponse, err error) {
	var _args useraction.UserActionServicePublishListArgs
	_args.Req = req
	var _result useraction.UserActionServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteAction(ctx context.Context, req *useraction.FavoriteActionRequest) (r *useraction.FavoriteActionResponse, err error) {
	var _args useraction.UserActionServiceFavoriteActionArgs
	_args.Req = req
	var _result useraction.UserActionServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *useraction.FavoriteListRequest) (r *useraction.FavoriteListResponse, err error) {
	var _args useraction.UserActionServiceFavoriteListArgs
	_args.Req = req
	var _result useraction.UserActionServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *useraction.CommentActionRequest) (r *useraction.CommentActionResponse, err error) {
	var _args useraction.UserActionServiceCommentActionArgs
	_args.Req = req
	var _result useraction.UserActionServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *useraction.CommentListRequest) (r *useraction.CommentListResponse, err error) {
	var _args useraction.UserActionServiceCommentListArgs
	_args.Req = req
	var _result useraction.UserActionServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationAction(ctx context.Context, req *useraction.RelationActionRequest) (r *useraction.RelationActionResponse, err error) {
	var _args useraction.UserActionServiceRelationActionArgs
	_args.Req = req
	var _result useraction.UserActionServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, req *useraction.RelationFollowListRequest) (r *useraction.RelationFollowListResponse, err error) {
	var _args useraction.UserActionServiceRelationFollowListArgs
	_args.Req = req
	var _result useraction.UserActionServiceRelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerList(ctx context.Context, req *useraction.RelationFollowerListRequest) (r *useraction.RelationFollowerListResponse, err error) {
	var _args useraction.UserActionServiceRelationFollowerListArgs
	_args.Req = req
	var _result useraction.UserActionServiceRelationFollowerListResult
	if err = p.c.Call(ctx, "RelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
