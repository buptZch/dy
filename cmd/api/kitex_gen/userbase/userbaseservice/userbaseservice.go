// Code generated by Kitex v0.3.2. DO NOT EDIT.

package userbaseservice

import (
	"context"
	"dy/cmd/user_base/kitex_gen/userbase"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userBaseServiceServiceInfo
}

var userBaseServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserBaseService"
	handlerType := (*userbase.UserBaseService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CreateUser": kitex.NewMethodInfo(createUserHandler, newUserBaseServiceCreateUserArgs, newUserBaseServiceCreateUserResult, false),
		"CheckUser":  kitex.NewMethodInfo(checkUserHandler, newUserBaseServiceCheckUserArgs, newUserBaseServiceCheckUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userbase",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.2",
		Extra:           extra,
	}
	return svcInfo
}

func createUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userbase.UserBaseServiceCreateUserArgs)
	realResult := result.(*userbase.UserBaseServiceCreateUserResult)
	success, err := handler.(userbase.UserBaseService).CreateUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserBaseServiceCreateUserArgs() interface{} {
	return userbase.NewUserBaseServiceCreateUserArgs()
}

func newUserBaseServiceCreateUserResult() interface{} {
	return userbase.NewUserBaseServiceCreateUserResult()
}

func checkUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userbase.UserBaseServiceCheckUserArgs)
	realResult := result.(*userbase.UserBaseServiceCheckUserResult)
	success, err := handler.(userbase.UserBaseService).CheckUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserBaseServiceCheckUserArgs() interface{} {
	return userbase.NewUserBaseServiceCheckUserArgs()
}

func newUserBaseServiceCheckUserResult() interface{} {
	return userbase.NewUserBaseServiceCheckUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateUser(ctx context.Context, req *userbase.CreateUserRequest) (r *userbase.CreateUserResponse, err error) {
	var _args userbase.UserBaseServiceCreateUserArgs
	_args.Req = req
	var _result userbase.UserBaseServiceCreateUserResult
	if err = p.c.Call(ctx, "CreateUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUser(ctx context.Context, req *userbase.CheckUserRequest) (r *userbase.CheckUserResponse, err error) {
	var _args userbase.UserBaseServiceCheckUserArgs
	_args.Req = req
	var _result userbase.UserBaseServiceCheckUserResult
	if err = p.c.Call(ctx, "CheckUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
